include orientation_base
.container
    .row
        .cmap-spacer-large
        .col-xs-offset-1.col-xs-10.col-md-offset-3.col-md-6
            .col-xs-12
                object(data="img/cluster.svg" type="image/svg+xml" class="svg-img-small")
            h2.col-xs-12.text-center Cluster

    //- Executing Jobs
    .row
        .col-xs-offset-1.col-xs-10.col-md-offset-3.col-md-6
            h3 Executing Jobs
            p Your CPW instance uses a program called <kbd>q</kbd> to schedule compute jobs to its onboard batch queuing system using built in sig_tools. To get a listing of all available tools, simply type <kbd>q</kbd> in the terminal when logged in to your CPW instance. Available tools are listed along with usage information on the <kbd>q</kbd> tool.
            p.console >> q <br> Q: Submit jobs to the batch queuing system <br> Usage: q <toolname> [arguments] <br>  <br> Batch scheduler cheat sheet: <br>  <br>   * q - submit Sig Tool jobs to the queue <br>   * qstat - show status of batch jobs <br>   * qhost - show status of hosts, queues, and jobs <br>   * qdel - delete batch jobs (e.g. qdel 7) <br>  <br> Available tools: <br> 	 sig_hello_world_tool <br> 	 sig_info_tool <br> 	 sig_introspect_tool <br> 	 sig_query_tool <br> 	 sig_quest_tool <br> 	 sig_slice_tool <br> 	 sig_summly_tool
            br
            p The standard form for all submissions we will use in this workshop is
            p.console >> q <tool_name> [arguments]
            p where <kbd>tool_name</kbd> is the name of the tool that you would like to run and <kbd>arguments</kbd> takes the value of any arguments that you would like to pass to the tool you are running.
            br
            p As an example, let's look at the following command
            p.console >> q sig_hello_world_tool
            p Here, <kbd>tool_name</kbd> is passed as <kbd>sig_hello_world_tool</kbd> and <kbd>arguments</kbd> is not passed to the tool.

    //- checking on a job
    .row
        //- checking the progress of a query
        .col-xs-offset-1.col-xs-10.col-md-offset-3.col-md-6
            br
            h3 checking the progress of a query
            p In order to check the progress your query, we will use the command <kbd>qstat</kbd>. <kbd>qstat</kbd> displays all of a users jobs currently in the queue as well as their status. A simplified view of the <kbd>qstat</kbd> console output looks like the following
            p.console job-ID user state <br> ------------------ <br> 63 username r
            p these are the most important fields to pay attention to when you check the status of your query. the meaning of the fields are:
            ol
                li <b>job-ID</b>: the job identifier used in the starCluster queuing system.
                li <b>username</b>: the username of the user that submitted the job. In normal usage, you will only see your jobs.
                li <b>state</b>: the current state of the job.
            p In particular, pay attention to the state of the job. A few states of interest are
            ol
                li <b>qw</b>: the job is queued, but not yet running
                li <b>r</b>: the job is running
            p If you use <kbd>qstat</kbd> to look for your job, but can't find it displayed there, it has most likely already completed. Let's confirm this by checking the log files that tools on CPW instances generate.

    //- log files
    .row
        .col-xs-offset-1.col-xs-10.col-md-offset-3.col-md-6
            br
            h3 Log Files
            p The cluster creates two files in your public_html folder when you run <kbd>q</kbd> by default. These files are <kbd>output.log</kbd> and <kbd>error.log</kbd>. <kbd>output.log</kbd> captures any standard output that a tool generates and <kbd>error.log</kbd> captures any standard error logs that tool generates.  You can inspect the contents of either of these files with standard linux tools.  For example, you could use <kbd>tail</kbd> to look at the latest outputs generated by the sig_quest_tool run you kicked off above.
            p.console >> tail ~/public_html/ouput.log

    // next steps
    .row
        .col-xs-offset-1.col-xs-10.col-md-offset-3.col-md-6
            h3 Next Steps
            p Take a look at the documentation for the tools included on your CPW instance.  Take a look at the raw data files and the code that libraries that are included on your CPW instance.
    // - Tools
    .row
        a.col-xs-offset-1.col-xs-10.col-md-offset-3.col-md-6.card.plain_link(href="/orientation?module=cpwTools")
            .cmap-spacer-large
            .col-xs-12
                object(data="img/tools.svg" type="image/svg+xml" class="svg-img-small")
            h2.col-xs-12.text-center Tools
            p The standard Connectivity Map tools built into your CPW cover common use cases of Connectivity Map data.  They provide mechanisms to slice, query, and identify the data in a variety of different ways.
    // - Data
    .row
        a.col-xs-offset-1.col-xs-10.col-md-offset-3.col-md-6.card.plain_link(href="/orientation?module=cpwData")
            .cmap-spacer-large
            .col-xs-12
                object(data="img/data.svg" type="image/svg+xml" class="svg-img-small")
            h2.col-xs-12.text-center Data
            p Connectivity Map data is provided on your CPW as matrix data files. Learn where the data is stored and about the format in which the data is stored.
    // - Code
    .row
        a.col-xs-offset-1.col-xs-10.col-md-offset-3.col-md-6.card.plain_link(href="/orientation?module=cpwCode")
            .cmap-spacer-large
            .col-xs-12
                object(data="img/code.svg" type="image/svg+xml" class="svg-img-small")
            h2.col-xs-12.text-center Code
            p Beyond the built in tools, your CPW provides code libraries for digging into the data yourself. Learn about the provided code libraries. Dive in to the data yourself using built in python libraries and learn by example.
